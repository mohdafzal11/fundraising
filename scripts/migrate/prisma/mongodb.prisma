generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client/mongodb"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

enum ProjectStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
}

enum InvestorStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
}

enum Currency {
  USD
  EUR
  BTC
  ETH
}

model Project {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  slug            String        @unique
  name            String        @unique
  symbol          String?
  title           String?
  description     String?       @db.String
  category        String[]
  logo            String?
  logoAltText     String?
  links           Json?
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  metaImage       String?
  status          ProjectStatus @default(DRAFT)

  rounds Round[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Round {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String?
  description String?   @db.String
  date        DateTime?
  amount      String?
  type        String?

  projectId String  @db.ObjectId
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  investments Investment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

model Investor {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String         @unique
  slug            String         @unique
  logo            String?
  logoAltText     String?
  description     String?        @db.String
  links           Json?
  type            String?
  investments     Investment[]
  status          InvestorStatus @default(DRAFT)
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  metaImage       String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Investment {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  roundId    String @db.ObjectId
  investorId String @db.ObjectId

  round    Round    @relation(fields: [roundId], references: [id], onDelete: Cascade)
  investor Investor @relation(fields: [investorId], references: [id], onDelete: Cascade)

  amount     String?
  currency   Currency? @default(USD)
  tokens     String?
  investedAt DateTime  @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([roundId, investorId])
  @@index([roundId])
  @@index([investorId])
}

model Page {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  title     String?
  content   String?
  path      String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  contents  PageContent[] @relation("PageToContent")
  faqs      PageFAQ[]     @relation("PageToFAQ")
}

model PageFAQ {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  question  String
  answer    String
  isActive  Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pageId    String   @db.ObjectId
  page      Page     @relation("PageToFAQ", fields: [pageId], references: [id])

  @@index([pageId])
  @@index([isActive, order])
}

model PageContent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String?
  content   String?
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pageId    String   @db.ObjectId
  page      Page     @relation("PageToContent", fields: [pageId], references: [id])

  @@index([pageId])
  @@index([isActive, order])
}

model Section {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  title                   String?
  tableOfContent          String?
  description             String?
  isActive                Boolean  @default(true)
  isTableOfContentVisible Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  tables                  Table[]  @relation("SectionToTable")
}

model Table {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  title                   String
  tableOfContent          String?
  headers                 String[]
  rows                    Json[]
  isActive                Boolean  @default(true)
  isTableOfContentVisible Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  sectionId               String   @db.ObjectId
  section                 Section  @relation("SectionToTable", fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([sectionId])
  @@index([isActive])
}
